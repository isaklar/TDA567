/* ####################################################################
													EXERCISE A
#################################################################### */

# AddWorkingPeriod
requires:
  employee is a non-null string
ensures:
  if starttime < 0 or endtime >= size or starttime > endtime then
    returns false and the schedule is unchanged
  otherwise
    if for any hour in the interval starttime to endtime the length of workingEmployees is equal to requiredNumber then
      returns false and the schedule is unchanged
    otherwise
      if for any hour in the interval starttime to endtime there is a string in workingEmployees which equal employee then
        returns false and the schedule is unchanged
      otherwise
        returns true,
        for i between starttime and endtime, workingEmployees contain a string equal to employee and
        the rest of the schedule is unchanged

# INPUT SPACE
All values for starttime and endtime
All non-null strings for employee

# PARTITIONS
Partition #1: starttime < 0
	test_addWorkingPeriod_part1:
		input:
      addWorkingPeriod("employee", -1, size)
		expected: false
      comment: Works fine.

Partition #2: endtime >= size
	test_addWorkingPeriod_part2:
		input:
      addWorkingPeriod("employee", 1, size+1)
		expected: false
      comment: Works fine.

Partition #3: starttime > endtime
	test_addWorkingPeriod_part3:
		input:
      addWorkingPeriod(employee, size, size-1)
		expected: false
      comment: Works fine.

Partition #4:  workingEmployee >= requiredNumber
	test_addWorkingPeriod_part4:
		input:
      setRequiredNumber(1, starttime, endtime)
      addWorkingPeriod("employee1", starttime, endtime)
      addWorkingPeriod("employee2", starttime, endtime)
		expected: false
      comment: Works fine.

Partition #5:  any workingEmployee == employee
	test_addWorkingPeriod_part5:
		input:
      addWorkingPeriod(employee1, starttime, endtime)
      addWorkingPeriod(employee2, starttime, endtime)
		expected: false
      comment: Works fine.

Partition #6: for(int i = 0; starttime < i < endtime; i++), check if workingEmployees contain a string equal to employee.
	test_addWorkingPeriod_part6:
	input:
    workingEmployees(starttime, endtime)(1)
    addWorkingPeriod("employee", starttime, endtime)
    workingEmployee(starttime, endtime)(2)
	expected: true
    comment: Works fine.

/* ####################################################################
	                          EXERCISE B
 #################################################################### */

# workingEmployees
requires:
  starttime >= 0 and endtime < size
ensures:
  if starttime <= endtime then
    returns an array with distinct strings -- a string appears in the return array if and only if
    it appears in the workingEmployees of at least one hour in the interval starttime to endtime
  otherwise
    returns an empty array
  and in either case the schedule is unchanged

# INPUTSPACE
All values for starttime and endtime so starttime >= 0 and endtime < size

# PARITIONS
Partition #1: starttime > endtime
	test_workingEmployees_part1:
	input:
		addWorkingPeriod("employee", starttime, endtime)
		workingEmployees(endttime, starttime)
	expected: false, or true if you check length of list equals to zero.
	 comment: We found a bug

Partition #2: starttime <= endtime
	test_workingEmployees_part2:
	input:
		addWorkingPeriod("employee", starttime, endtime)
		workingEmployees(starttime, endtime)
	expected: true
		comment: Works fine.
